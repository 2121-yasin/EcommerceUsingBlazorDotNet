@page "/cart"
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.Net.Http
@inject HttpClient HttpClient
@using System.IdentityModel.Tokens.Jwt
@using System.Net.Http.Headers
@using System.Net.Http.Json

<h3>Cart</h3>

@if (cart != null)
{
    <table class="cart-table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Image</th>
                <th>Description</th>
                <th>Price</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cart.Products)
            {
                <tr>
                    <td>@item.ProdName</td>
                    <td><img class="product-image" src="@item.ImageURL" alt="Product Image" /></td>
                    <td>@item.Description</td>
                    <td>@item.Price</td>
                    <td>
                        @if (item.Quantity <= 0)
                        {
                            <span class="out-of-stock">Out of Stock</span>
                        }
                        else if (item.Quantity < 5)
                        {
                            <span class="low-stock">Low Stock</span>
                        }
                        else
                        {
                            <span class="in-stock">In Stock</span>
                        }
                    </td>
                    <td>
                        <span class="remove-icon">
                            <i class="bi bi-trash text-success remove-icon fs-5" @onclick="() => RemoveFromCart(item)"></i>
                        </span>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="6" class="total-row">
                    Total Price: <span class="total-price">@CalculateTotalPrice(cart.Products)</span>
                </td>
            </tr>
        </tfoot>
    </table>
}
else
{
    <p>Your cart is empty.</p>
}

@code {
    private CartModel cart;
    private bool isLoaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLoaded)
        {
            await LoadCartData();
            isLoaded = true;
        }
    }

    private async Task LoadCartData()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var handler = new JwtSecurityTokenHandler();
        var decodedToken = handler.ReadJwtToken(token);

        var userId = decodedToken.Claims.FirstOrDefault(c => c.Type == "id")?.Value;

        var url = $"https://localhost:7044/api/cart/{userId}";

        cart = await HttpClient.GetFromJsonAsync<CartModel>(url);

        StateHasChanged();
    }
private async Task RemoveFromCart(CartItemModel item)
{
    var url = $"https://localhost:7044/api/cart/RemoveFromCart/{item.CartItemId}";

    var response = await HttpClient.DeleteAsync(url);

    if (response.IsSuccessStatusCode)
    {
        cart.Products.Remove(item);
        await LoadCartData(); // Reload the cart data after removing the item
    }
    else
    {
        // Handle error case
    }
}
    private decimal CalculateTotalPrice(List<CartItemModel> products)
    {
        decimal totalPrice = 0;
        foreach (var item in products)
        {
            if (item.Quantity > 0)
            {
                totalPrice += item.Price;
            }
        }
        return totalPrice;
    }

    public class CartModel
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public decimal TotalPrice { get; set; }
        public List<CartItemModel> Products { get; set; }
    }

    public class CartItemModel
    {
        public int CartItemId { get; set; }
        public string ProdName { get; set; }
        public string ImageURL { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}


@* <h1>Cart</h1>

@if (isRendered)
{
@if (cartItems == null || cartItems.Length == 0)
{
    <p>Your cart is empty</p>
}
else
{
   <div class="row">
    @foreach (var item in cartItems)
    {
        <div class="col-lg-3 col-md-6 col-sm-6 d-flex">
            <div class="shadow-lg card w-100 my-2 shadow-2-strong">
                <a href="@($"/details/{item.id}")">
                    <img src="@item.image" alt="@item.name" class="card-img-top" style="aspect-ratio: 1 / 1" />
                </a>
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">@item.name</h5>
                    <p class="card-text">Price: @item.price</p>
                    <p class="card-text">Quantity: @item.quantity</p>
                    <p class="card-text">Total Price: @item.totalPrice</p>
                    <div class="card-footer d-flex align-items-end pt-3 px-0 pb-0 mt-auto">
                        <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" data-toggle="tooltip" data-placement="top" title="Remove item from cart" onclick="@(() => RemoveFromCart(item.id))"><i class="bi bi-cart-x" style="font-size: 2rem;"></i></a>
                        <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" title="Add to wishlist"
                            data-product-id="@item.id"
                            data-product-image="@item.image"
                            data-product-name="@item.name"
                            data-product-price="@item.price"
                            onclick="addToWishlist(event)">
                            <i class="bi bi-heart text-danger " style="font-size: 2rem;"></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div style="text-align: center;">
  <a @onclick="HandleCheckoutClick" class="btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Checkout for Payment Options" style="max-width: 250px;"><i class="bi bi-bag-check" style="font-size: 2rem;"></i></a>
</div>


}
}

@code {
    private bool isRendered;
    private CartItem[] cartItems;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    var storage = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "localStorage");
    var json = await storage.InvokeAsync<string>("getItem", "cartItems");
    if (!string.IsNullOrEmpty(json))
    {
        cartItems = JsonSerializer.Deserialize<CartItem[]>(json);
    }
    else
    {
        cartItems = new CartItem[0];
    }
    isRendered = true;
    StateHasChanged();
}


    private class CartItem
    {
        public string id { get; set; }
        public string name { get; set; }
        public string price { get; set; }
        public string image { get; set; }
        public int quantity { get; set; }
        public string totalPrice { get; set; }
    }



private async Task RemoveFromCart(string id)
{
    var cartItemsList = cartItems.ToList();
    var itemToRemove = cartItemsList.FirstOrDefault(x => x.id == id);
    if (itemToRemove != null)
    {
        cartItemsList.Remove(itemToRemove);
        cartItems = cartItemsList.ToArray();
        var storage = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "localStorage");
        await storage.InvokeVoidAsync("setItem", "cartItems", JsonSerializer.Serialize(cartItems));
    }

    // Call the JavaScript function to decrease the cart counter
    await JSRuntime.InvokeVoidAsync("RemoveFromCart", id);
}


//checkout page opens only when the user is logged in else it will navigate the user to login registration page
private async Task HandleCheckoutClick()
{
    var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
    if (string.IsNullOrEmpty(token))
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Please login to your account");
        if (result)
        {
            NavigationManager.NavigateTo($"https://localhost:7085/?ClientId=a0d0b3a2-efa4-47ca-b193-45bdbd950f3a");
        }
    }
    else
    {
        NavigationManager.NavigateTo($"/checkout?token={token}");
    }
}

} *@
