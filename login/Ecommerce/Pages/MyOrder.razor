@page "/myorder"
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json;

@if (ProductItems != null && ProductItems.Count > 0)
{
    <h4>My Order</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Action</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var productItem in ProductItems)
            {
                <tr>
                    <td><img src="@productItem.ImageURL" alt="Product Image" style="width: 100px;" /></td>
                    <td>@productItem.ProdName</td>
                    <td>@productItem.Price</td>
                    <td><button class="btn btn-outline-success" @onclick="() => TrackOrder(productItem.Id)">Track</button></td>
                    <td>
                        <span class="@GetOrderStatusClass(productItem.Status)">@GetOrderStatusText(productItem.Status)</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No products found in My Order.</p>
}

@code {
    List<ProductItem> ProductItems { get; set; }

    private string GetOrderStatusClass(OrderStatus status)
    {
        switch (status)
        {
            case OrderStatus.Pending:
                return "status-pending";
            case OrderStatus.ItemPacked:
                return "status-item-packed";
            case OrderStatus.DeliveredToNearestHub:
                return "status-delivered-hub";
            case OrderStatus.OutForDelivery:
                return "status-out-delivery";
            case OrderStatus.Delivered:
                return "status-delivered";
            default:
                return string.Empty;
        }
    }

    private string GetOrderStatusText(OrderStatus status)
    {
        switch (status)
        {
            case OrderStatus.Pending:
                return "Pending";
            case OrderStatus.ItemPacked:
                return "Item Packed";
            case OrderStatus.DeliveredToNearestHub:
                return "Delivered to Nearest Hub";
            case OrderStatus.OutForDelivery:
                return "Out for Delivery";
            case OrderStatus.Delivered:
                return "Delivered";
            default:
                return string.Empty;
        }
    }

    private void TrackOrder(string productId)
    {
        // Find the corresponding product item
        var productItem = ProductItems.FirstOrDefault(item => item.Id == productId);
        if (productItem != null)
        {
            // Update the order status
            switch (productItem.Status)
            {
                case OrderStatus.Pending:
                    productItem.Status = OrderStatus.ItemPacked;
                    break;
                case OrderStatus.ItemPacked:
                    productItem.Status = OrderStatus.DeliveredToNearestHub;
                    break;
                case OrderStatus.DeliveredToNearestHub:
                    productItem.Status = OrderStatus.OutForDelivery;
                    break;
                case OrderStatus.OutForDelivery:
                    productItem.Status = OrderStatus.Delivered;
                    break;
                case OrderStatus.Delivered:
                    // If the order is already delivered, do nothing
                    break;
            }

            // Update the product item in the list
            StateHasChanged();

            // Save the updated product items to local storage
            SaveProductItemsToLocalStorage();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RetrieveProductItemsFromLocalStorage();
            StateHasChanged();
        }
    }
private async Task RetrieveProductItemsFromLocalStorage()
{
    var productsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "products");
    if (!string.IsNullOrEmpty(productsJson))
    {
        ProductItems = JsonConvert.DeserializeObject<List<ProductItem>>(productsJson);
    }
}

private async Task SaveProductItemsToLocalStorage()
{
    var productsJson = JsonConvert.SerializeObject(ProductItems);
    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "products", productsJson);
}

public class ProductItem
{
    public string Id { get; set; }
    public string ImageURL { get; set; }
    public string ProdName { get; set; }
    public decimal Price { get; set; }
    public OrderStatus Status { get; set; }
}

public enum OrderStatus
{
    Pending,
    ItemPacked,
    DeliveredToNearestHub,
    OutForDelivery,
    Delivered
}

}
