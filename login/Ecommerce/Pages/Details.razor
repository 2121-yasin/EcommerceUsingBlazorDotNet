@page "/details/{ProdId}"
@using Ecommerce.Models
@using Newtonsoft.Json;
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions;
@inject IHttpContextAccessor HttpContextAccessor
@using Razorpay
@using Razorpay.Api
@inject IJSRuntime JSRuntime
@using System.Threading.Tasks;
@using System.IdentityModel.Tokens.Jwt;
@using SendGrid;
@using SendGrid.Helpers.Mail;
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System;
@using Microsoft.JSInterop
@using System.Text
@inject HttpClient HttpClient
@using System.Net.Http.Headers;




@if (Product != null)
{
<div>
<h4>Product Specifications</h4>
<hr />
<dl>
<div class="col-lg-3 col-md-6 col-sm-6 d-flex">
<div class="shadow-lg card w-100 my-2 shadow-2-strong">
<img src="@Product.ImageURL" class="card-img-top" style="aspect-ratio: 1 / 1" />
</div>
</div> <br/>
<div class="row">
@if((HttpContextAccessor.HttpContext?.Session?.GetString("UserRole")) == "Admin")
{
<dt class="col-sm-1">
<label>@nameof(Product.ImageURL)</label>
</dt>
<dd class="col-sm-11">
<span>@Product.ImageURL</span>
</dd>
                <dt class="col-sm-1">
                    <label>@nameof(Product.StartDate)</label>
                </dt>
                <dd class="col-sm-11">
                    <span>@Product.StartDate</span>
                </dd>
            }

            @if((HttpContextAccessor.HttpContext?.Session?.GetString("UserRole")) == "Admin")
            {
                <dt class="col-sm-1">
                    <label>@nameof(Product.ProdId)</label>
                </dt>
                <dd class="col-sm-11">
                    <span>@Product.ProdId</span>
                </dd>
            }

            <dt class="col-sm-1">
                <label>@nameof(Product.ProdName)</label>
            </dt>
            <dd class="col-sm-11">
                <span>@Product.ProdName</span>
            </dd>
            <dt class="col-sm-1">
                <label>@nameof(Product.Description)</label>
            </dt>
            <dd class="col-sm-11">
                <span>@Product.Description</span>
            </dd>
            <dt class="col-sm-1">
                <label>@nameof(Product.Price)</label>
            </dt>
            <dd class="col-sm-11">
                <span>@Product.Price</span>
            </dd>


            <dt class="col-sm-1">
                <label>@nameof(Product.StockQty)</label>
            </dt>
            <dd class="col-sm-11">
                <span>@Product.StockQty</span>
            </dd>
            <dt class="col-sm-1">
                <label>@nameof(Product.StockStatus)</label>
            </dt>
            <dd class="col-sm-11">
    <span style="@(Product.StockQty == 0 ? "color: red;" : (Product.StockQty < 5 ? "color: orange;" : "color: green;"))">
        @(Product.StockQty == 0 ? "Out of Stock" : (Product.StockQty < 5 ? "Low Stock" : "In Stock"))
    </span>
</dd>

        </div>

    </dl>
</div>


@if((HttpContextAccessor.HttpContext?.Session?.GetString("UserRole")) == "Admin")
{
    <div>
        <a href="@($"Edit/{Product.ProdId}")">Edit</a> |
        <a href="@($"Index")">View All Products</a>
    </div>
}


<button class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" title="Add to cart"
   @onclick="() => AddToCart(Product)">
    <i class="bi bi-cart4" style="font-size: 2rem;"></i>
</button>

    
  <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" title="Add to wishlist"
  data-product-id="@Product.ProdId"
  data-product-image="@Product.ImageURL"
   data-product-name="@Product.ProdName"
   data-product-price="@Product.Price"
   onclick="addToWishlist(event)">
  <i class="bi bi-heart text-danger " style="font-size: 2rem;"></i>
</a>
  <button class="btn btn-outline-success col-6" style="max-width: 250px;"
        onclick="@(() => ProcessPayment(Product.Price))">
    Proceed for payment &#x20B9;@Product.Price
</button>
}





@code{
    [Parameter]
    public string ProdId { get; set; }
    public Products Product { get; set; }

    private RazorpayClient _razorpayClient;
    private string _orderId;

    

private async Task AddToCart(Products product)
{
    var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
    if (string.IsNullOrEmpty(token))
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Please login to your account");
        if (result)
        {
            NavigationManager.NavigateTo($"https://localhost:7085/?ClientId=a0d0b3a2-efa4-47ca-b193-45bdbd950f3a");
            return;
        }
    }

    HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    var handler = new JwtSecurityTokenHandler();
    var decodedToken = handler.ReadJwtToken(token);

    var userId = decodedToken.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
    var productId = product.ProdId;

    // Fetch the product vendor ID dynamically
    var productVendorId = await GetProductVendorId(productId);

    var url = $"https://localhost:7044/api/cart/{userId}?productId={productId}&productVendorId={productVendorId}";

    using (var httpClientHandler = new HttpClientHandler())
    {
        httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
        using (var httpClient = new HttpClient(httpClientHandler))
        {
            var response = await httpClient.PostAsync(url, null);
            var statusCode = response.StatusCode;

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Item successfully added to the cart.");
            }
            else
            {
                if (statusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Item already present in the cart.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to add item to the cart.");
                }
            }
        }
    }
}

private async Task<int> GetProductVendorId(int productId)
{
    var url = $"https://localhost:7044/api/products/{productId}/vendor";

    using (var httpClientHandler = new HttpClientHandler())
    {
        httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
        using (var httpClient = new HttpClient(httpClientHandler))
        {
            var response = await httpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var jsonStr = await response.Content.ReadAsStringAsync();
                var vendor = JsonConvert.DeserializeObject<ProductVendor>(jsonStr);
                return vendor.Id;
            }
            else
            {
                throw new Exception("Failed to retrieve product vendor ID.");
            }
        }
    }
}






private async Task ProcessPayment(double totalAmount)
{
    var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
    
    if (string.IsNullOrEmpty(token))
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Please login to your account.");
        if (confirmed)
        {
            NavigationManager.NavigateTo($"https://localhost:7085/?ClientId=a0d0b3a2-efa4-47ca-b193-45bdbd950f3a");
        }
    }
    else
    {
        _razorpayClient = new RazorpayClient("rzp_test_ey1WcrE0RhwbYJ", "EcjqcEhxYm4cy639PIqMTHkI");
          _razorpayClient = new RazorpayClient("rzp_test_ey1WcrE0RhwbYJ", "EcjqcEhxYm4cy639PIqMTHkI");

    var options = new Dictionary<string, object>
    {
        { "amount", (int)(totalAmount * 100) }, // Convert to paise
        { "currency", "INR" }, // Replace with your currency code
        { "receipt", Guid.NewGuid().ToString() }
    };

    var order = _razorpayClient.Order.Create(options);
    _orderId = order["id"].ToString();

    var script = await JSRuntime.InvokeAsync<string>("RazorpayCheckout.createPayment", _orderId, "rzp_test_ey1WcrE0RhwbYJ", totalAmount);
    var paymentDetails = await JSRuntime.InvokeAsync<string>("eval", script);

    token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
    var handler = new JwtSecurityTokenHandler();
    var decodedToken = handler.ReadJwtToken(token);

    // After the order is successfully placed and stored in the database
    // After the order is successfully placed and stored in the database
@* Product.StockQty -= 1;

// Update the stock quantity in local storage
await JSRuntime.InvokeVoidAsync("localStorage.setItem", $"stockQty_{Product.ProdId}", Product.StockQty.ToString());
 *@


    // After the order is successfully placed and stored in the database
    var recipientEmail = decodedToken.Claims.FirstOrDefault(c => c.Type == "Email")?.Value; // Replace with the recipient's email address
    await SendOrderConfirmationEmail(recipientEmail);

    }
    
}

private class PaymentDetails
{
    public string paymentId { get; set; }
    public DateTime createdAt { get; set; }
    public string description { get; set; }
    public string customer { get; set; }
    public string email { get; set; }
    public string contact { get; set; }
    public string street { get; set; }
    public string city { get; set; }
    public string state { get; set; }
    public string pincode { get; set; }
    public string totalFee { get; set; }
    public string orderId { get; set; }
    public string notes { get; set; }
}

private async Task SendOrderConfirmationEmail(string recipientEmail)
{
    var apiKey = ""; // Remove this key before uploading on GitHub
    var client = new SendGridClient(apiKey);
    var from = new EmailAddress("honnolliyasin@gmail.com", "E shop");
    var subject = "Order Confirmation";
    var to = new EmailAddress(recipientEmail);

    // Retrieve the payment details from session storage
    var paymentDetailsJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "paymentDetails");
    var paymentDetails = System.Text.Json.JsonSerializer.Deserialize<PaymentDetails>(paymentDetailsJson);

    // Generate the HTML content using Bootstrap classes
var htmlContent = @"<!DOCTYPE html>
                    <html>
                    <head>
                        <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css"">
                        <style>
                            .paid-watermark {
                                position: absolute;
                                top: 50%;
                                left: 50%;
                                transform: translate(-50%, -50%);
                                font-size: 64px;
                                color: green;
                                opacity: 0.5;
                                z-index: 1;
                            }
                        </style>
                    </head>
                    <body>
                        <div class=""container"">
                            <h1 class=""mb-4"">Thank you for your order!</h1>
                            <table class=""table table-bordered"">
                                <tr>
                                    <th>Payment ID:</th>
                                    <td>" + paymentDetails.paymentId + @"</td>
                                </tr>
                                <tr>
                                    <th>Created At:</th>
                                    <td>" + paymentDetails.createdAt.ToString() + @"</td>
                                </tr>
                                <tr>
                                    <th>Description:</th>
                                    <td>" + paymentDetails.description + @"</td>
                                </tr>
                                <tr>
                                    <th>Customer:</th>
                                    <td>" + paymentDetails.customer + @"</td>
                                </tr>
                                <tr>
                                    <th>Email:</th>
                                    <td>" + paymentDetails.email + @"</td>
                                </tr>
                                <tr>
                                    <th>Contact:</th>
                                    <td>" + paymentDetails.contact + @"</td>
                                </tr>
                                <tr>
                                    <th>Street:</th>
                                    <td>" + paymentDetails.street + @"</td>
                                </tr>
                                <tr>
                                    <th>City:</th>
                                    <td>" + paymentDetails.city + @"</td>
                                </tr>
                                <tr>
                                    <th>State:</th>
                                    <td>" + paymentDetails.state + @"</td>
                                </tr>
                                <tr>
                                    <th>Pincode:</th>
                                    <td>" + paymentDetails.pincode + @"</td>
                                </tr>";

@if (Product != null)
{
    htmlContent += @"<tr>
                        <th>Product Name:</th>
                        <td>" + Product.ProdName + @"</td>
                    </tr>";
}

htmlContent += @"<tr>
                    <th>Order ID:</th>
                    <td>" + paymentDetails.orderId + @"</td>
                </tr>
                <tr>
                    <th>Notes:</th>
                    <td>" + paymentDetails.notes + @"</td>
                </tr>
                <tr>
                    <th>Total Fee:</th>
                    <td><span class=""text-success"">" + paymentDetails.totalFee + @"</span></td>
                </tr>
            </table>
            <div class=""paid-watermark"">Paid</div>
            </div>
        </body>
    </html>";

    // Save the payment details to a text file
    var filePath = "PaymentDetails.html";
    await File.WriteAllTextAsync(filePath, htmlContent);

    // Read the payment details from the text file
    var attachmentBytes = await File.ReadAllBytesAsync(filePath);

    var attachment = new Attachment
    {
        Filename = "PaymentDetails.html",
        Type = "text/html",
        Content = Convert.ToBase64String(attachmentBytes),
        ContentId = "PaymentDetails"
    };

    // Create the email message
    var msg = new SendGridMessage();
    msg.From = from;
    msg.AddTo(to);
    msg.Subject = subject;
    msg.HtmlContent = "<strong>Thank you for your order!</strong><br><br>" +
    "<p>Payment details are attached.</p>";
    msg.AddAttachment(attachment);

    // Send the email
    var response = await client.SendEmailAsync(msg);
    // Save the product details in local storage
    await JSRuntime.InvokeVoidAsync("saveToLocalStorage", Product.ProdId, Product.ImageURL, Product.ProdName, Product.Price);

}


   protected override async Task OnInitializedAsync()
    {
        var id = Convert.ToInt32(Regex.Match(NavigationManager.Uri, @"\d+$").Value);
        //Console.WriteLine(id);
        Product = await GetProductById(id);
    }




@* protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        var id = Convert.ToInt32(Regex.Match(NavigationManager.Uri, @"\d+$").Value);
        Product = await GetProductById(id);

        // Retrieve the stock quantity from local storage
        var stockQty = await JSRuntime.InvokeAsync<string>("localStorage.getItem", $"stockQty_{Product.ProdId}");
        if (!string.IsNullOrEmpty(stockQty))
        {
            Product.StockQty = int.Parse(stockQty);
            StateHasChanged();
        }
    }
} *@





    private async Task<Products> GetProductById(int id)
    {
        var baseUrl = "https://localhost:7044/api/products/";
        using (var httpClientHandler = new HttpClientHandler())
        {
            // httpClientHandler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; }; // Below used as not all implementations support this callback, and some throw PlatformNotSupportedException.
            httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator; // (NOT SECURE) connect to a server with a certificate that shouldn't be validated
            using (var httpClient = new HttpClient(httpClientHandler))
            {
                var jsonStr = await httpClient.GetStringAsync(baseUrl + id);
                var product = JsonConvert.DeserializeObject<Products>(jsonStr);
                return product;
            }
        }
    }

    
}
