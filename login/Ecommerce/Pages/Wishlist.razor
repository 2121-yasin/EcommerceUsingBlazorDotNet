@page "/wishlist"
@using System.Text.Json
@inject IJSRuntime JSRuntime

<h1>Wishlist</h1>

@if (isRendered)
{
@if (wishlistItems == null || wishlistItems.Length == 0)
{
    <p>Your cart is empty</p>
}
else
{
    <div class="row">
        @foreach (var item in wishlistItems)
        {
      <div class="col-lg-3 col-md-6 col-sm-6 d-flex">
        <a href="@($"/details/{item.id}")">
          <div class="shadow-lg card w-100 my-2 shadow-2-strong">
            <img src="@item.image" alt="@item.name" class="card-img-top" style="aspect-ratio: 1 / 1" />
            <div class="card-body d-flex flex-column">
              <h5 class="card-title">@item.name</h5>
              <p class="card-text">Price: @item.price</p>
              <div class="card-footer d-flex align-items-end pt-3 px-0 pb-0 mt-auto">
                  <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" data-toggle="tooltip" data-placement="top" title="Remove from wishlist" onclick="@(() => RemoveFromWishlist(item.id))"><i class="bi bi-x-circle" style="font-size: 2rem;"></i></a>
                  <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" title="Add to cart"
                  data-product-id="@item.id"
                  data-product-image="@item.image"
                  data-product-name="@item.name"
                  data-product-price="@item.price"
                  onclick="addToCart(event)">
                    <i class="bi bi-cart4 " style="font-size: 2rem;"></i>
                  </a>
              </div>
            </div>
          </div>
          </a>
      </div>

        }
            </div>
}
}

@code {
    private bool isRendered;
    private WishListItem[] wishlistItems;

protected override async Task OnAfterRenderAsync(bool firstRender)
{
    var storage = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "sessionStorage");
    var json = await storage.InvokeAsync<string>("getItem", "wishlistItems");
    if (!string.IsNullOrEmpty(json))
    {
        wishlistItems = JsonSerializer.Deserialize<WishListItem[]>(json);
    }
    else
    {
        wishlistItems = new WishListItem[0];
    }
    isRendered = true;
    StateHasChanged();
}


    private class WishListItem
    {
        public string id { get; set; }
        public string name { get; set; }
        public string price { get; set; }
        public string image { get; set; }
    }



    private async Task RemoveFromWishlist(string id)
{
    var wishlistItemsList = wishlistItems.ToList();
    var itemToRemove = wishlistItemsList.FirstOrDefault(x => x.id == id);
    if (itemToRemove != null)
    {
        wishlistItemsList.Remove(itemToRemove);
        wishlistItems = wishlistItemsList.ToArray();
        var storage = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "sessionStorage");
        await storage.InvokeVoidAsync("setItem", "wishlistItems", JsonSerializer.Serialize(wishlistItems));
    }
}

}
