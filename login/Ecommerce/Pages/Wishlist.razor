@page "/wishlist"
@using System.Text.Json
@inject IJSRuntime JSRuntime
@using System.IdentityModel.Tokens.Jwt;
@using SendGrid;
@using SendGrid.Helpers.Mail;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System;
@using Microsoft.JSInterop
@using System.Text
@inject HttpClient HttpClient
@using System.Net.Http.Headers;
@using Newtonsoft.Json
@using Ecommerce.Models


<h1>Wishlist</h1>

@if (isRendered)
{
    @if (wishlistItems == null || wishlistItems.Length == 0)
    {
        <p>Your cart is empty</p>
    }
    else
    {
        <div class="row">
            @foreach (var item in wishlistItems)
            {
                <div class="col-lg-3 col-md-6 col-sm-6 d-flex">
                    <a href="@($"/details/{item.id}")">
                        <div class="shadow-lg card w-100 my-2 shadow-2-strong">
                            <img src="@item.image" alt="@item.name" class="card-img-top" style="aspect-ratio: 1 / 1" />
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@item.name</h5>
                                <p class="card-text">Price: @item.price</p>
                                <div class="card-footer d-flex align-items-end pt-3 px-0 pb-0 mt-auto">
                                    <button href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight"
                                        data-toggle="tooltip" data-placement="top" title="Remove from wishlist"
                                        onclick="@(() => RemoveFromWishlist(item.id))"><i class="bi bi-x-circle"
                                            style="font-size: 2rem;"></i></button>
                                    <button class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight"
                                        title="Add to cart" @onclick="() => AddToCart(item)">
                                        <i class="bi bi-cart4" style="font-size: 2rem;"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>

            }
        </div>
    }
}

@code {
    private bool isRendered;
    private WishListItem[] wishlistItems;

    private async Task AddToCart(WishListItem item)
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (string.IsNullOrEmpty(token))
        {
            var result = await JSRuntime.InvokeAsync<bool>("confirm", "Please login to your account");
            if (result)
            {
                NavigationManager.NavigateTo($"https://localhost:7085/?ClientId=a0d0b3a2-efa4-47ca-b193-45bdbd950f3a");
                return;
            }
        }

        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var handler = new JwtSecurityTokenHandler();
        var decodedToken = handler.ReadJwtToken(token);

        var userId = decodedToken.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
        var productId = item.id;

        // Fetch the product vendor ID dynamically
        var productVendorId = await GetProductVendorId(productId);

        var url = $"https://localhost:7044/api/cart/{userId}?productId={productId}&productVendorId={productVendorId}";

        using (var httpClientHandler = new HttpClientHandler())
        {
            httpClientHandler.ServerCertificateCustomValidationCallback =
            HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
            using (var httpClient = new HttpClient(httpClientHandler))
            {
                var response = await httpClient.PostAsync(url, null);
                var statusCode = response.StatusCode;

                if (response.IsSuccessStatusCode)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Item successfully added to the cart.");
                }
                else
                {
                    if (statusCode == System.Net.HttpStatusCode.BadRequest)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Item already present in the cart.");
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Failed to add item to the cart.");
                    }
                }
            }
        }
    }

    private async Task<int> GetProductVendorId(string productId)
    {
        var baseUrl = $"https://localhost:7044/api/products/{productId}/vendor";

        using (var httpClientHandler = new HttpClientHandler())
        {
            httpClientHandler.ServerCertificateCustomValidationCallback =
            HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
            using (var httpClient = new HttpClient(httpClientHandler))
            {
                var jsonStr = await httpClient.GetStringAsync(baseUrl);
                var vendor = JsonConvert.DeserializeObject<ProductVendor>(jsonStr);
                return vendor?.Id ?? 0;
            }
        }
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var storage = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "localStorage");
        var json = await storage.InvokeAsync<string>("getItem", "wishlistItems");
        if (!string.IsNullOrEmpty(json))
        {
            wishlistItems = System.Text.Json.JsonSerializer.Deserialize<WishListItem[]>(json);
        }
        else
        {
            wishlistItems = new WishListItem[0];
        }
        isRendered = true;
        StateHasChanged();
    }


    private class WishListItem
    {
        public string id { get; set; }
        public string name { get; set; }
        public string price { get; set; }
        public string image { get; set; }
    }



    private async Task RemoveFromWishlist(string id)
    {
        var wishlistItemsList = wishlistItems.ToList();
        var itemToRemove = wishlistItemsList.FirstOrDefault(x => x.id == id);
        if (itemToRemove != null)
        {
            wishlistItemsList.Remove(itemToRemove);
            wishlistItems = wishlistItemsList.ToArray();
            var storage = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "localStorage");
            await storage.InvokeVoidAsync("setItem", "wishlistItems", System.Text.Json.JsonSerializer.Serialize(wishlistItems));
        }
    }

}
