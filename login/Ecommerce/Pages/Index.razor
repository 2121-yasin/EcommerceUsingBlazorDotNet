@page "/"
@using Ecommerce.Models
@using Newtonsoft.Json;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using BlazorStrap
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http.Headers;
@inject HttpClient HttpClient
@using System.Text
@inject SweetAlertService Swal;
@using System.Net;

<PageTitle>EShop</PageTitle>

@*<CustomDialog @ref="dialogRef" />*@

@code {
    @*private CustomDialog dialogRef;*@
    public List<Products> Product { get; set; }
    private string searchQuery;


    private string GetStockStatus(int stockQty)
    {
        if (stockQty <= 0)
        {
            return "Out of Stock";
        }
        else if (stockQty < 5)
        {
            return "Low Stock";
        }
        else
        {
            return "In Stock";
        }
    }






    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        if (uri.Query.Contains("search="))
        {
            searchQuery = uri.Query.Split("=")[1];
        }

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        Product = await GetProduct();
        foreach (var product in Product)
        {
            product.StockStatus = GetStockStatus(product.StockQty);
        }
    }

    private async Task<List<Products>> GetProduct()
    {
        var baseUrl = "https://localhost:7044/api/products/all";

        if (!string.IsNullOrEmpty(searchQuery))
        {
            baseUrl = $"https://localhost:7044/api/products/search?name={Uri.EscapeDataString(searchQuery)}";
        }

        using (var httpClientHandler = new HttpClientHandler())
        {
            httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
            using (var httpClient = new HttpClient(httpClientHandler))
            {
                var jsonStr = await httpClient.GetStringAsync(baseUrl);
                var products = JsonConvert.DeserializeObject<List<Products>>(jsonStr);
                foreach (var product in products)
                {
                    var vendor = await GetProductVendor(product.ProdId);
                    product.ProductVendorId = vendor?.Id ?? 0;
                }
                return products;
            }
        }
    }


    private async Task<ProductVendor> GetProductVendor(int productId)
    {
        var baseUrl = $"https://localhost:7044/api/products/{productId}/vendor";

        using (var httpClientHandler = new HttpClientHandler())
        {
            httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
            using (var httpClient = new HttpClient(httpClientHandler))
            {
                var jsonStr = await httpClient.GetStringAsync(baseUrl);
                var vendor = JsonConvert.DeserializeObject<ProductVendor>(jsonStr);
                return vendor;
            }
        }
    }
    private async Task AddToCart(Products product)
{
    var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
    if (string.IsNullOrEmpty(token))
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Login Required",
            Text = "Please login to your account",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Login",
            CancelButtonText = "No, thanks"
        });

        if (result.IsConfirmed)
        {
            NavigationManager.NavigateTo($"https://localhost:7085/?ClientId=a0d0b3a2-efa4-47ca-b193-45bdbd950f3a");
            return;
        }
    }

    HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    var handler = new JwtSecurityTokenHandler();
    var decodedToken = handler.ReadJwtToken(token);

    var userId = decodedToken.Claims.FirstOrDefault(c => c.Type == "id")?.Value;
    var productId = product.ProdId;

    var url = $"https://localhost:7044/api/cart/{userId}?productId={productId}&productVendorId={productVendorId}";

    using (var httpClientHandler = new HttpClientHandler())
    {
        httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
        using (var httpClient = new HttpClient(httpClientHandler))
        {
            var confirmResult = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Do you want to add item to cart?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No"
            });

            if (confirmResult.IsConfirmed)
            {
                // Proceed with adding the item to the cart
                var response = await httpClient.PostAsync(url, null);
                var statusCode = response.StatusCode;

                if (response.IsSuccessStatusCode)
                {
                    // Item added to cart successfully
                    var successResult = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "Item added to cart successfully!",
                        Icon = SweetAlertIcon.Success,
                        ConfirmButtonText = "OK",
                    });
                }
                else if (response.StatusCode == HttpStatusCode.BadRequest)
{
    // Item already present in the cart
    var errorResult = await Swal.FireAsync(new SweetAlertOptions
    {
        Title = "Alert!!",
        Text = "Item already present in the cart. If you want to add it again, you can go to the cart and select the quantity.",
        Icon = SweetAlertIcon.Warning,
        ConfirmButtonText = "OK",
    });
}
                else
                {
                    // Failed to add item to the cart
                    var errorResult = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Alert!!",
                        Text = "Failed to add item to the cart.",
                        Icon = SweetAlertIcon.Warning,
                        ConfirmButtonText = "OK",
                    });
                }
            }
            else
            {
                // User clicked "No," abort the process
                return;
            }
        }
    }
}





    private int productVendorId;
    private async Task SetProductVendorId(int vendorId, Products product)
    {
        productVendorId = vendorId;
        await AddToCart(product);
    }


    public bool IsTokenPresent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsTokenPresent = await IsTokenPresentAsync();
            StateHasChanged();
        }
    }

    private async Task<bool> IsTokenPresentAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        return !string.IsNullOrEmpty(token);
    }






}


<div>
    <div class="d-flex justify-content-center m-5 p-5 carousel-container align-items-start">
        <div style="position: absolute; top: 50%; left: 19%; transform: translate(-50%, -50%);">
            <img src="../../../Assets/female.png" alt="Image" style="width: 300px;height: 262px;" />
        </div>
<div id="carouselExampleAutoplaying" class="carousel slide rounded-end" data-bs-ride="carousel" data-bs-interval="2000">

    <div class="carousel-inner">
        @if (Product != null)
                {
                    @foreach (var (item, index) in Product.Take(19).Select((item, index) => (item, index)))
                    {
                        <div class="carousel-item @(item.ProdId == 1 ? "active" : "")">
                            <a href="@($"/details/{item.ProdId}")">
                                <img src="@item.ImageURL" class="d-block w-100" style="object-fit: contain; max-height: 180px;" />
                                <div class="carousel-caption">
                        <h4 style="font-size: 30px; font-weight: bold; color: red;width: 450px;text-align: center;margin-left: -20px;">Great Indian Deals</h4>
                        <p style="font-size:15px;color: blue;width: 450px;text-align: center;margin-left: -5px;">
                                        @switch (item.ProdId)
                                        {
                                            case 1:
                                                <text>End of Season Sales - Upto 80% Off on Mobile Accessories</text>
                                                break;
                                            case 2:
                                                <text>End of Season Sales - Upto 30% Off on Samsung</text>
                                                break;
                                            case 3:
                                                <text>End of Season Sales - Upto 10% Off on Apple</text>
                                                break;
                                            case 4:
                                                <text>End of Season Sales - Upto 30% Off on Xiaomi</text>
                                                break;
                                            case 5:
                                                <text>End of Season Sales - Upto 60% Off on Cooker</text>
                                                break;
                                            case 6:
                                                <text>End of Season Sales - Upto 70% Off on T-Shirts</text>
                                                break;
                                            case 7:
                                                <text>End of Season Sales - Upto 20% Off on Shoes</text>
                                                break;
                                            case 8:
                                                <text>End of Season Sales - Upto 30% Off on Womens T-Shirts</text>
                                                break;
                                            case 9:
                                                <text>End of Season Sales - Upto 50% Off on kids Footwear</text>
                                                break;
                                            case 10:
                                                <text>End of Season Sales - Upto 50% Off on bags</text>
                                                break;
                                            case 11:
                                                <text>End of Season Sales - Upto 30% Off on FirstCry</text>
                                                break;
                                            case 12:
                                                <text>End of Season Sales - Upto 65% Off on heels</text>
                                                break;
                                            case 13:
                                                <text>End of Season Sales - Upto 30% Off on Microwave owen</text>
                                                break;
                                            case 14:
                                                <text>End of Season Sales - Upto 70% Off on LED TV</text>
                                                break;
                                            case 15:
                                                <text>End of Season Sales - Upto 60% Off on Laptops</text>
                                                break;
                                            case 16:
                                                <text>End of Season Sales - Upto 30% Off on HeadPhones</text>
                                                break;
                                            case 17:
                                                <text>End of Season Sales - Upto 30% Off on Camera</text>
                                                break;
                                            case 18:
                                                <text>End of Season Sales - Upto 450% Off on SparX</text>
                                                break;
                                            case 19:
                                                <text>End of Season Sales - Upto 450% Off on HandBag</text>
                                                break;
                                            // Add more cases for other products
                                            default:
                                                <text></text>
                                                break;
                                        }
                        </p>
                        <p style="font-size: 14px; color: black;margin-left: -10px;">
                            31<span style="display: inline-block; vertical-align: super; font-size: 12px; font-weight: bold;">st</span>
                            June 2023
                        </p>
                    </div>
                            </a>
                        </div>
                    }

                }
    </div>
</div>


        <div style="position: absolute;display: flex; justify-content: flex-end;top: 50%; left: 77%; transform: translate(-50%, -50%);">
            <img src="../../../Assets/femimg.png" alt="Image" style="width: 300px; height: 262px;" />

            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleAutoplaying"
                data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleAutoplaying"
                data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>

    </div>
</div>








<section>
  <div class="container my-5">
    <header class="mb-4">
      <h3>New products</h3>
    </header>
        @if (Product != null && Product.Any())
        {
            <div class="row">
                @foreach (var product in Product)
                {
                    <div class="col-lg-3 col-md-6 col-sm-6 d-flex">
                      <a href="@($"/details/{product.ProdId}")">
                        <div class="shadow-lg card w-100 my-2 shadow-2-strong">
                          <img src="@product.ImageURL" class="card-img-top" style="aspect-ratio: 1 / 1" />
                          <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@product.ProdName</h5>
                            <p class="card-text">@product.Price.ToString("c")</p>
                                <p class="card-text">
                <span style="@(product.StockStatus == "In Stock" ? "color: green;" : (product.StockStatus == "Out of Stock" ? "color: red;" : "color: orange;"))">
                                            @product.StockStatus
                </span>
            </p>
                            <div class="card-footer d-flex align-items-end pt-3 px-0 pb-0 mt-auto">

                                        @* <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" title="Add to cart"
                      data-product-id="@product.ProdId"
                      data-product-image="@product.ImageURL"
                      data-product-name="@product.ProdName"
                      data-product-price="@product.Price"
                      onclick="addToCart(event)">
                        <i class="bi bi-cart4" style="font-size: 2rem;"></i>
                      </a> *@

        <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" title="Add to cart"
                                        @onclick="() => SetProductVendorId(product.ProductVendorId, product)"
           style="@(IsTokenPresent ? "" : "display: none;")">
            <i class="bi bi-cart4" style="font-size: 2rem;"></i>
        </a>

                                        @* <a href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" title="Add to cart"
   data-product-id="@product.ProdId"
   data-product-image="@product.ImageURL"
   data-product-name="@product.ProdName"
   data-product-price="@product.Price"
   onclick="addToCart(event)"
   style="@(IsTokenPresent ? "display: none;" : "")">
    <i class="bi bi-cart4" style="font-size: 2rem;"></i>
</a> *@









                              <button href="" class="btn btn-light border px-3 pt-2 icon-hover mx-4 btn-hover-highlight" title="Add to wishlist"
                              data-product-id="@product.ProdId"
                              data-product-image="@product.ImageURL"
                              data-product-name="@product.ProdName"
                              data-product-price="@product.Price"
                              onclick="addToWishlist(event)">
                                <i class="bi bi-heart text-danger" style="font-size: 2rem;"></i>
                              </button>
                            </div>
                          </div>
                        </div>
                      </a>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No new products available.</p>
        }
  </div>
</section>







