@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@using Ecommerce.Models
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json;
@inject HttpClient httpClient
@inject IConfiguration Configuration
@using System.IdentityModel.Tokens.Jwt;
<PageTitle>EShop</PageTitle>

@code {
    private int cartCounter;
    private bool isLoaded = false;
    public List<Products> Product { get; set; }
    private string searchQuery;
    private bool isLoggedIn = false;

    private string token;
     private string clientId;
    private string username;
    
    protected override void OnInitialized()
    {
        clientId = Configuration.GetValue<string>("AppSettings:ClientId");
    }


     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLoaded)
        {
    // Set the flag to prevent repeated execution
        isLoaded = true;

        // Retrieve the cart counter value from local storage
        var cartCounterString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "cartCounter");
        if (int.TryParse(cartCounterString, out var parsedCartCounter))
        {
            cartCounter = parsedCartCounter;
        }
        else
        {
            cartCounter = 0;
        }


            var uri = new Uri(NavigationManager.Uri);
            if (uri.Query.Contains("token="))
            {
                token = uri.Query.Split("=")[1];
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", token);
                isLoggedIn = true;
               

        //string token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";

            var handler = new JwtSecurityTokenHandler();
            var decodedToken = handler.ReadJwtToken(token);
// loop through claims and find email claim
foreach (var claim in decodedToken.Claims)
{
    if (claim.Type == "UserName")
    {
        // display email
        username = claim.Value;
    }
}

 StateHasChanged();
            }


        }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "token");
        isLoggedIn = false;
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }

protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        if (uri.Query.Contains("search="))
        {
            searchQuery = uri.Query.Split("=")[1];
        }

        Product = await GetProduct();

    }

    private async Task<List<Products>> GetProduct()
    {
        var baseUrl = "https://localhost:7044/api/products/all";
        using (var httpClientHandler = new HttpClientHandler())
        {
            httpClientHandler.ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
            using (var httpClient = new HttpClient(httpClientHandler))
            {
                var jsonStr = await httpClient.GetStringAsync(baseUrl);
                var products = JsonConvert.DeserializeObject<List<Products>>(jsonStr);

                if (!string.IsNullOrEmpty(searchQuery))
                {
                    // Filter products based on the search query
                    products = products.Where(p => p.ProdName.ToLower().Contains(searchQuery.ToLower())).ToList();
                }

                return products;
            }
        }
    }

     private async Task SearchProducts()
    {
        // Redirect to the search results page with the search query as a parameter
        await JSRuntime.InvokeVoidAsync("open", $"/?search={Uri.EscapeDataString(searchQuery)}", "_self");
    }

}

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
      
        <div class="top-row px-4">
         @* <form class="d-flex" role="search" onsubmit="@SearchProducts">
    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" @bind-value="@searchQuery">
    <button class="btn btn-outline-success" type="submit">Search</button>
</form> *@

          <form class="d-flex" role="search" @onsubmit="SearchProducts">
        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" @bind-value="@searchQuery">
        <button class="btn btn-outline-success" type="submit">Search</button>
    </form>

            
            @if (!isLoggedIn)
            {
                <a href="cart" class="btn btn-outline-danger border px-3 pt-2 icon-hover mx-2" data-toggle="tooltip" data-placement="top" title="View Items in a Cart"><i class="bi bi-cart4">
                                    @if (cartCounter > 0)
            {
                <span class="cart-counter">@cartCounter</span>
            }
                </i></a>
            <a href="wishlist" class="btn btn-outline-danger border px-3 pt-2 icon-hover mx-2" data-toggle="tooltip" data-placement="top" title="View Wishlist"><i class="bi bi-heart-fill"></i></a>
                <button class="btn btn-outline-danger my-2 my-sm-0 mx-2" @onclick='() => NavigationManager.NavigateTo($"https://localhost:7085/?ClientId={clientId}")'>Login</button>
            }
            else
            {
            <a href="@($"/cart?token={token}")" class="btn btn-outline-danger border px-3 pt-2 icon-hover mx-2" data-toggle="tooltip" data-placement="top" title="View Items in a Cart"><i class="bi bi-cart4">   
                @if (cartCounter > 0)
            {
                <span class="cart-counter">@cartCounter</span>
            }
            </i>
            </a>
            <a href="@($"/wishlist?token={token}")" class="btn btn-outline-danger border px-3 pt-2 icon-hover mx-2" data-toggle="tooltip" data-placement="top" title="View Wishlist"><i class="bi bi-heart-fill"></i></a>
            <a href="@($"/MyOrder?token={token}")" class="btn btn-outline-success border px-3 pt-2 icon-hover mx-2" data-toggle="tooltip" data-placement="top" title="My Orders"><i class="bi bi-bag-fill"></i></a>   
                <a href="@($"/profile?token={token}")">
                    <button  class="btn btn-outline-success " type="button" id="profile-btn"  aria-expanded="false" data-toggle="tooltip" data-placement="top" title="My Profile">
                    <i class="bi bi-person-badge"></i>Welcome, @username!
                </button>
                </a>
                 <button class="btn btn-outline-danger my-2 my-sm-0 mx-2" @onclick="Logout">Logout</button>
            }
            
          @* <div id="mode" class="toggle btn btn-outline-danger my-2 my-sm-0 mx-2" data-toggle="tooltip" data-placement="top" title="Change Mode">
                        <i class="bi bi-moon-stars"></i>
           </div> *@
    
        </div>
 <article class="content px-4">
            @Body
    </article>
        
    </main>
</div>
